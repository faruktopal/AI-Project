import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import OneHotEncoder, StandardScaler, MinMaxScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score
from xgboost import XGBRegressor
from google.colab import drive
#Importing the necessary libraries

# Loading the Excel file
drive.mount('/content/drive')
file_path = '/content/drive/My Drive/emlak_fiyat.xlsx'
data = pd.read_excel(file_path)

# Splitting the target variable (Fiyat) and features
y = data['Fiyat (TL)']
X = data.drop(columns=['Fiyat (TL)'])

# Separating categorical and numerical columns
categorical_features = ['Konum', 'Oda Sayısı', 'Asansör', 'Doğal Gaz']
numerical_features = ['Metrekare', 'Bina Yaşı', 'Kat Durumu']

# Transforming categorical data using OneHotEncoder
preprocessor = ColumnTransformer(
    transformers=[
        ('num', 'passthrough', numerical_features),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ])
# Predictor (XGBoost Regressor) and pipeline
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', XGBRegressor(n_estimators=100, random_state=24, eval_metric='rmse'))
])

# Splitting data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=24)

# Cross-validation
y_train_log = np.log1p(y_train)
cv_scores = cross_val_score(
    model['regressor'],  # The XGBRegressor model in the pipeline
    model['preprocessor'].fit_transform(X_train),  # Preprocessed X data
    y_train_log,
    cv=5,
    scoring='neg_mean_squared_error'
)

# Training the model
model.fit(X_train, y_train)

# Scaling the y values
scaler_y = MinMaxScaler(feature_range=(-100, 100))

# If y_train and y_test are pandas.Series, convert them to NumPy arrays
y_train_scaled = scaler_y.fit_transform(y_train.values.reshape(-1, 1))
y_test_scaled = scaler_y.transform(y_test.values.reshape(-1, 1))

# Printing cross-validation scores
print(f"Cross-Validation Mean Squared Errors: {-cv_scores}")
print(f"Average Cross-Validation Mean Squared Error (MSE): {-cv_scores.mean():.2f}")

# Train the model (X data remains unchanged)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Compute errors on the scaled y values
mse_scaled = mean_squared_error(y_test_scaled, scaler_y.transform(y_pred.reshape(-1, 1)))
r2_scaled = r2_score(y_test_scaled, scaler_y.transform(y_pred.reshape(-1, 1)))

print(f"Scaled Test Data Mean Squared Error (MSE): {mse_scaled:.2f}")
print(f"Scaled Test Data R^2 Score: {r2_scaled:.2f}")
